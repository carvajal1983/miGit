COMANDOS GIT y GITHUB

GITHB: mi primer cambio

INICIAR:

    Antes de instalarlo se debe actualizar el apt con los permisos de administrador (sudo)
    
    1. sudo apt-get update
    
    ahora se debe instalar GIT

    2. sudo apt-get install GIT

    verificamos la vesion instalada 

    3. git --version

Escoger la CARPETA para realizar la gestion versiones con GIT utilizando el siguiente comando 

    1. git init


CONFIGURAR GIT

    Mostrar todas las cofiguraciones posibles que tiene GIT
    
    1. git config

    mostrar la configuración por defecto de mi GIT

    2. git config --list


    mostrat la ruta donde queda guardada la configuración de nuestro GIT

    3. git config --list --show-origin

    guardar el NOMBRE DE USURAIO de la configuración de git

    4. git config --global user.name "MI NOMBRE DE USUARIO"

    guardar el E-MAIL de la configuración de git

    5. git config --global user.email "mi@correo.com"



MOSTRAR el ESTATUS actual de nuestro gestion de versiones

    1. git status 

MOSTRAR EL HISTORIAL DEL git

    1. git log nombre_del_archivo.txt

MUESTRA los cambio con detalle de bits

    2. git log --stat

MOSTRAR los CAMBIOS que han existido en un archivo

    1. git show nombre_del_archivo.txt

 MUESTRA los cambios que se realizaron de un archivo a otro

    1. git diff indicador_del_commit_A indicador_del_commit_B 




AGREGAR archivos a git 

    1. git add nombre_del_archivo.txt




AGREGAR todos los archivos de la carpeta a git 

    1. git add .




ELIMINAR los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro
para tener en cuenta, con: (git checkout nos deja ir, mirar, pasear y volver. )

    1. git rm --cached nombre_del_archivo.txt

ELIMINA los archivos de Git y del disco duro

    2. git rm --force nombre_del_archivo.txt




MOVER los cambios de Staging a Unstaged

    1. git reset HEAD



*** PELIGRO *** 
REGRESAR a versiones anteriores sin retorno (No hay vuelta atrás)

ELIMINAR todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging
así podemos aplicar las últimas actualizaciones a un nuevo commit.

    1. git reset INDICADOR --soft 

ELIMINA todo

    2. git reset INDICADOR --hard





Mandar los cambios al REPOSITORIO del archivo en cuestión incluyendo un mensaje -m

    1. git commit -m "aqui va el mensaje guia"



RETORNAR al contenido de una versión X

    1. git checkout INDICADOR nombre_del_archivo.txt

RETORNAR al contenido de una versión MASTER

    2. git checkout master archivo.txt

# MOVERSE A UNA RAMA (BRANCH)

    1. git checkout rama1 




CREAR RAMAS (BRANCH)

    1. git branch nombr_de_la_rama



***** PASO PARA FUSIONAR EL MASTER Y LAS RAMAS *****

# Crear un nuevo commit en la rama master combinando
# los cambios de la rama

    1. git checkout master
    2. git merge nombre_de_la_rama

# Crear un nuevo commit en la rama cabecera combinando
# los cambios de cualquier otra rama:
    
    1. git checkout cabecera
    2. git merge cualquier-otra-rama   

*******************************************************



Desde ahora vamos a trabajar en una rama (branch)

esto son aportes de estudiantes del curso:


git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar l





************************************* Uso de GitHub *************************************

# Para clonar un repositorio desde GitHub (o cualquier otro servidor remoto) debemos copiar la URL 
# (por ahora, usando HTTPS) y ejecutar el comando 

    1. git remote add origin URL

# Esto descargara la versión de nuestro proyecto que se encuentra en GitHub.


---------------------- PASO A PASO ----------------------

# Primero: Guardar la URL del repositorio de GitHub
# con el nombre de origin

    git remote add origin URL

# Segundo: Verificar que la URL se haya guardado
# correctamente:

    git remote
    git remote -v

# Tercero: Traer la versión del repositorio remoto y
# hacer merge para crear un commit con los archivos
# de ambas partes. Podemos usar git fetch y git merge
# o solo el git pull con el flag --allow-unrelated-histories:

    git pull origin master --allow-unrelated-histories

# Por último, ahora sí podemos hacer git push para guardar
# los cambios de nuestro repositorio local en GitHub:

    git push origin master

-----------------------------------------------------------


*****************************************************************************************

